#!/usr/bin/env perl

# --------------------------------------------------------------------
# モジュールロード
# --------------------------------------------------------------------

use strict;
use utf8;
use Encode qw/encode decode/;
use Data::Dumper;
use Getopt::Long qw/GetOptions/;
use Cwd;

# --------------------------------------------------------------------
# 下準備：変数用意、マクロ用意
# --------------------------------------------------------------------

# -- 環境判別
my $is_win = $^O =~ /MSWin/; # Windows
my $is_mac = $^O =~ /darwin/; # Mac OSX
my $is_linux = !($is_win || $is_mac); # Mac Linux

# -- コマンド出力の制御
my $hide_err = $is_win ? '2>NUL'     : '2>/dev/null';     # エラーのみ非表示
my $hide_all = $is_win ? '>NUL 2>&1' : '>/dev/null 2>&1'; # エラーと標準出力両方とも非表示

# -- 設定格納ディレクトリ
my $genie_dir = $ENV{GENIE_DIR} || '.genie';

# -- sayコマンドが使えるか否か
my $can_say;
if($is_win) {
	`where wscript $hide_all`;
	$can_say = !$?;
} elsif ($is_mac) {
	`which say $hide_all`;
	$can_say = !$?;
}

# -- Windows向けにShift-JIS出力関数を通す関数を先に用意
sub echo { print encode($is_win ? 'Shift_JIS' : 'UTF-8', shift) }

# -- 設定値変数
my %config;

print "\n";

# --------------------------------------------------------------------
# 起動オプション、設定ファイル読み込み
# --------------------------------------------------------------------

# -- コマンドオプション設定
GetOptions(
	'm=s' => \$config{GENERAL}->{runmode},
	'c=s' => \$config{GENERAL}->{config_name},
);
$config{GENERAL}->{runmode} ||= 'develop';    # 未指定の場合 `develop` として動作します。
$config{GENERAL}->{config_name} ||= 'config'; # 未指定の場合 `.genie/config.pl` を読み込みます。

# -- .genieディレクトリがあるパスを探して移動する
my $genie_path = "./$genie_dir";
my $now_path = Cwd::getcwd();
$now_path =~ s/^([A-Za-z])\:\//\//; # ドライブレター削除（for Windows）
my $drive_letter = $1;
my @dirs = split('/', $now_path);
while(@dirs){
	my $genie_path = join('/', @dirs);
	if(-d "$genie_path/$genie_dir") {
		$config{GENERAL}->{home_path} = $genie_path;
		chdir $genie_path;
		last;
	}
	pop @dirs;
}

# -- 設定ファイルをロード
my $config_file = "$genie_dir/$config{GENERAL}->{config_name}.pl";
if(-f $config_file){
	# -- 設定を読み込み
	my $r = require $config_file;
	%config = (%config, %$r);
} else {
	unless($ARGV[0] eq '' || grep{$ARGV[0] eq $_} qw/clear init view httpd demo/){ # ←設定ファイルが無くても実行可能なものを列挙
		throw("設定ファイル（$config_file）が先祖パスに見つかりません。\n`genie init`をお忘れではないですか？");
	}
}

# --------------------------------------------------------------------
# Docker環境用意
# --------------------------------------------------------------------

# -- default設定
$config{DOCKER}->{MACHINE} ||= 'default';

# -- docker-machine起動
{
	my $cmd = 'docker-machine start ' . $config{DOCKER}->{MACHINE}. ' ' . $hide_err;
	my $result = `$cmd`;
	if($? && $result !~ /^Starting/) {
		throw('Dockerマシンの起動に失敗しました。', $cmd);
	}
}

# -- docker-machineの環境切り替え
{
	my $cmd = 'docker-machine env ' . $config{DOCKER}->{MACHINE} . ' ' . $hide_err;
	foreach my $line (split(/[\r\n]+/, `$cmd`)) {
		if($line =~ /(DOCKER_\w+)\s*\=\s*\"?([^\"]+)\"?/) {
			$ENV{$1} = $2;
		}
	}
}

# --------------------------------------------------------------------
# 処理分け
# --------------------------------------------------------------------

# -- 第一引数により関数にジャンプ
if( grep{ $ARGV[0] eq $_ } qw /
	demo
	init
	up down
	cmd cli
	config view
	clear
	httpd
	build
/ ){
	no strict;
	$ARGV[0]->();

	# -- 終了処理
	style(color=>'black', bgcolor=>'dark_black');
	echo "  EOL\n\n";
	style(color=>'clear', bgcolor=>'clear');

	# -- genie正常完了
	exit 0;
}

# --------------------------------------------------------------------
# コマンド引数ヘルプ表示
# --------------------------------------------------------------------

echo "\n";
echo "Usage: genie COMMAND [arg...] [OPTIONS]\n";
echo "\n";
echo <<HELP;
\x1b[36mGENERAL\x1b[0m  | up                    起動（コンテナ作成）＆再起動
\x1b[36mCOMMANDS\x1b[0m | down                  終了（コンテナ削除）
         | version               kazaoki/genieのバージョンを表示
         | info                  詳細を表示
         | upgrade               kazaoki/genieのアップグレード
         | config                設定値を表示する
         | ip                    ホストIPを表示する
         | cli                   コマンドラインに入る
         | logs                  主要ログを表示する
         | htop                  htop実行
         | ngrok                 ngrokを使って外部に公開
         | cmd                   コンテナ内でコマンドを実行
         | build                 独自Dockerfileをビルドする
         | clear                 '$config{DOCKER}->{NAME}'コンテナ強制rm、all→全dockerコンテナ強制rm、noneimage→<none>イメージrmi
         | -m [RUNMODE]          実行モード：product|develop
         | -c [CONFIG TYPE]      設定タイプ：標準は general

\x1b[36mDATABASE\x1b[0m | mysql                 mysql実行
\x1b[36mCOMMANDS\x1b[0m | psql                  psql実行
         | dump                  ダンプ
         | restore               リストア
         | -d [DB CONNECT ID]    DB接続ID
         | -f [DB DUMP FILE]     対象のDBダンプファイル

\x1b[36mBROWSER\x1b[0m  | open                  ブラウザ起動
\x1b[36mCOMMANDS\x1b[0m | -s [URI SCHEMA]       httpかhttpsかを指定（未指定ならhttp）
         | -p [WEB PORT]         ポートを指定
         | -u [URL PATH]         パスを指定

\x1b[36mTEST\x1b[0m     | test [FEATURES]       テストを実行
\x1b[36mCOMMANDS\x1b[0m | -r [REPORT MAIL TO]   実行後のレポートHTMLの送り先

\x1b[36mOTHER\x1b[0m    | ftpsync               指定のFTPからDL同期
\x1b[36mCOMMANDS\x1b[0m | deploy                指定のGitリポジトリからpull同期
         | rmi-none              <none>状態のdockerイメージを全て削除

HELP

exit 0;

# --------------------------------------------------------------------
# ヘルパー関数
# --------------------------------------------------------------------

# メッセージ表示ヘルパー
# ----------------------
sub message {
	my ($type, $message, $line) = @_;
	my @messages = split(/[\r\n]+/, $message);
	my %style;
	my %clear = (color=>'clear', bgcolor=>'clear', weight=>'clear', decoratiinfo=>'clear');
	
	   if($type eq 'default' ) { %style = (color=>'dark_white'); }
	elsif($type eq 'primary' ) { %style = (color=>'blue'); }
	elsif($type eq 'success' ) { %style = (color=>'green'); }
	elsif($type eq 'info'    ) { %style = (color=>'cyan'); }
	elsif($type eq 'warning' ) { %style = (color=>'yellow'); }
	elsif($type eq 'danger'  ) { %style = (color=>'red'); }
	elsif($type eq 'disabled') { %style = (color=>'black'); }

	my $width;
	foreach(@messages) {
		my $len = length Encode::encode('cp932', $_);
		if($width<$len) { $width = $len; }
	}
	style(%style);

	echo '  +' . ('-' x ($width+2)) . "+\n";
	my $count;
	foreach(@messages) {
		my $len = length Encode::encode('cp932', $_);
		echo '  | ';
		echo $_;
		echo ' ' x ($width==$len ? 0 : $width-$len);
		echo " |\n";
		if(++$count==$line) {
			echo '  +' . ('-' x ($width+2)) . "+\n";
		}
	}
	echo '  +' . ('-' x ($width+2)) . "+\n";
	style(%clear);
	print "\n";
}

# カラーセットヘルパー
# --------------------
# style(
# 	color      => 'red',
# 	bgcolor    => 'blue',
# 	weight     => 'bold',
# 	decoration => 'undeline',
# );
sub style {
	my %style = @_;
	my($color, $bgcolor) = @_;
	my %colors = (
		black        => "\x1b[90m", dark_black   => "\x1b[30m",
		red          => "\x1b[91m", dark_red     => "\x1b[31m",
		green        => "\x1b[92m", dark_green   => "\x1b[32m",
		yellow       => "\x1b[93m", dark_yellow  => "\x1b[33m",
		blue         => "\x1b[94m", dark_blue    => "\x1b[34m",
		magenta      => "\x1b[95m", dark_magenta => "\x1b[35m",
		cyan         => "\x1b[96m", dark_cyan    => "\x1b[36m",
		white        => "\x1b[97m", dark_white   => "\x1b[37m",
		clear        => "\x1b[39m",
	);
	my %bgcolors = (
		black        => "\x1b[100m", dark_black   => "\x1b[40m",
		red          => "\x1b[101m", dark_red     => "\x1b[41m",
		green        => "\x1b[102m", dark_green   => "\x1b[42m",
		yellow       => "\x1b[103m", dark_yellow  => "\x1b[43m",
		blue         => "\x1b[104m", dark_blue    => "\x1b[44m",
		magenta      => "\x1b[105m", dark_magenta => "\x1b[45m",
		cyan         => "\x1b[106m", dark_cyan    => "\x1b[46m",
		white        => "\x1b[107m", dark_white   => "\x1b[47m",
		clear        => "\x1b[49m",
	);
	my %weight = (
		bold    => "\x1b[1m",
		clear   => "\x1b[0m",
	);
	my %decoration = (
		underline => "\x1b[4m",
		clear     => "\x1b[0m",
	);
	my $set = '';
	$set .= $colors{$style{color}} ? $colors{$style{color}} : '';
	$set .= $bgcolors{$style{bgcolor}} ? $bgcolors{$style{bgcolor}} : '';
	$set .= $weight{$style{weight}} ? $weight{$style{weight}} : '';
	$set .= $decoration{$style{decoration}} ? $decoration{$style{decoration}} : '';
	print $set if $set;
}

# 起動しているか確認するヘルパー
# ------------------------------
sub is_up {
	my $cmd = 'docker inspect ' . $config{DOCKER}->{NAME};
	`$cmd $hide_all`;
	return !$?;
}

# 起動してない場合はエラーを表示するヘルパー
# ------------------------------------------
sub require_up {
	if(!is_up()) {
		message(warning=>'起動してません：' . $config{DOCKER}->{NAME});
		return;
	}
	return 1;
}

# データ入力ヘルパー
# ------------------
sub input {
	my $string = shift;
	my $tail_space = shift || 20;
	my $len = (length Encode::encode('cp932', $string)) + 2 + $tail_space;
	style(color=>'white', bgcolor=>'blue');
	echo ' ' x $len . "\n";
	echo "  $string".(' 'x$tail_space)."\n";
	echo ' ' x $len . "\n";
	style(color=>'white', bgcolor=>'dark_blue');
	echo ' ' x $len . "\n";
	style(color=>'white', bgcolor=>'blue');
	echo "\e[3A\e[".($len-$tail_space)."C";
	my $input = <STDIN>;
	echo "\e[2B";
	style(color=>'clear', bgcolor=>'clear');
	return decode('sjis', $input);
}

# エラー終了ヘルパー
# ------------------
sub throw {
	my($message, $detail) = @_;
	if($detail) {
		message(danger=>"$message\n$detail", scalar(split(/\n/, $message)));
	} else {
		message(danger=>$message);
	}
	exit 1;
}

# スピーチヘルパー
# ----------------
sub say {
	return if(!$can_say);
	my $message = encode($is_win ? 'Shift_JIS' : 'UTF-8', shift);
	if($is_mac) {
	    `say -r 300 "$message"`;
	} elsif ($is_win) {
		`wscript $drive_letter\:$config{GENERAL}->{home_path}/$genie_dir/say.js "$message"`;
	}
}

# --------------------------------------------------------------------
# genie init                                                    初期化
# --------------------------------------------------------------------
sub init {

	# -- カレントに設定ディレクトリ作成
	if( -d $genie_dir) {
		throw("$genie_dir ディレクトリが既にあるので処理を中止します。");
	} else {
		mkdir $genie_dir;
	}
	if( -d $genie_dir) {
		message(success=>"$genie_dir ディレクトリを作成しました。");
	} else {
		throw("$genie_dir ディレクトリが作成できませんでした。");
	}

	# -- config.plの作成
	{
		my $result = open my $fh, '>:raw', "$genie_dir/config.pl"
			or throw("設定ファイル `$genie_dir/config.pl` が作成できませんでした。")
		;
		print $fh encode('UTF-8', <<'EOL');
return {

	# Docker設定
	# ----------
	DOCKER => {
		IMAGE   => 'kazaoki/genie',
		MACHINE => 'default',
		NAME    => 'genie-test',
	},

	# ネットワーク設定
	# ----------------
	NETWORK => {
		HOSTS_ME => [
			'site.com',
			'www.site.com',
			'smtp.gmail.com',
		],
		HOSTS_ETC => [
			# {''=>'site.com'},
		],
	},

	# Apache設定
	# ----------
	APACHE => {
		PUBLIC_PATH => '../www',
		BANDWIDTH => '',
	},

	# Postfix設定
	# -----------
	POSTFIX => {
		FORCE_ENVELOPE => 'xxx@xxx.xxx',
	},

};
EOL
		close $fh;
	}

	# -- entry.shの作成
	{
		my $result = open my $fh, '>:raw', "$genie_dir/entry.sh"
			or throw("設定ファイル `$genie_dir/entry.sh` が作成できませんでした。")
		;
		print $fh encode('UTF-8', <<'EOL');
#!/bin/sh

# -- daemon loop start
while true
do
    sleep 60
done
EOL
		close $fh;
	}

	# -- say.jsの作成（Windowsの場合のみ）
	if($is_win) {
		my $result = open my $fh, '>:raw', "$genie_dir/say.js"
			or throw("`$genie_dir/say.js` が作成できませんでした。")
		;
		print $fh encode('UTF-8', <<'EOL');
var args = [];
for(var i = 0; i < WScript.Arguments.length; i++) args.push(WScript.Arguments.Item(i));
WScript.CreateObject('SAPI.SpVoice').Speak('<volume level="100">'+'<rate speed="2">'+'<pitch middle="0">'+args.join(' ')+'</pitch>'+'</rate>'+'</volume>', 8);
EOL
		close $fh;
	}

}

# --------------------------------------------------------------------
# genie demo                                                      デモ
# --------------------------------------------------------------------
sub demo {

	# -- カラーメッセージBOX
	foreach(qw/default primary success info warning danger disabled/) {
		message($_=>$_);
	}
	message(warning=>"複数行も\n可能です!!");
	message(default=>"1箇所なら\nライン入れも\n可能であります。",2);

	# -- 入力BOX
	my $input = input('入力BOX：');
	print "\n";
	message(default=>"入力された文字：$input");

	# -- sayテスト
	say($input);

	# -- エラー終了
	throw('エラーテスト', '終了ステータス1で終わります');
}

# --------------------------------------------------------------------
# genie up                                                起動・再起動
# --------------------------------------------------------------------
sub up {
	if(is_up()) {
		message(danger=>'起動中です：'.$config{DOCKER}->{NAME});
	} else {
		if(!-s $config{GENERAL}->{home_path}."/$genie_dir/entry.sh"){
			throw("$config{GENERAL}->{home_path}/$genie_dir/entry.sh が見当たりませんので起動できません。");
		}

		# -- PostgreSQLの起動
		{
			;
		}

		# -- MySQLの起動
		{
			;
		}

		# -- 本体の起動（Apache）
		{
			my $vpath = $is_win ? '/'.lc($drive_letter).$config{GENERAL}->{home_path} : $config{GENERAL}->{home_path};
			my $cmd =
				'docker run -d'.
				' -e TERM=xterm'.
				" -v $vpath/$genie_dir:/genie --name=$config{DOCKER}->{NAME} $config{DOCKER}->{IMAGE}"
			;
			my $output = `$cmd`;
			if(!$?){
				message(info=>'起動しました：'.$config{DOCKER}->{NAME}."\n".$output);
			}
		}
	}
}

# --------------------------------------------------------------------
# genie down                                                      終了
# --------------------------------------------------------------------
sub down {
	return unless require_up(); # 起動必須

	my $cmd = 'docker rm -f ' . $config{DOCKER}->{NAME};
	`$cmd`;
	if(!$?){
		message(disabled=>'終了しました：' . $config{DOCKER}->{NAME});
	}
}

# --------------------------------------------------------------------
# genie cli                                       コマンドラインに入る
# --------------------------------------------------------------------
sub cli {
	return unless require_up(); # 起動必須

	my $cmd = 'docker exec -it ' . $config{DOCKER}->{NAME} . ' /bin/bash';
	system($cmd);
	echo "\n";
}

# --------------------------------------------------------------------
# genie cmd                                         コマンドを実行する
# --------------------------------------------------------------------
sub cmd {
	return unless require_up(); # 起動必須

	my $cmd = 'docker exec ' . $config{DOCKER}->{NAME} . ' ' . join(' ', @ARGV[1..$#ARGV]);
	`$cmd`;
}

# --------------------------------------------------------------------
# genie view                          マシン、イメージ、コンテナの一望
# --------------------------------------------------------------------
sub view {

	# -- Dockerマシン一覧
	{
		echo "Dockerマシン一覧\n";
		my $result = `docker-machine ls`;
		message(info=>$result, 1);
	}
	print "\n";

	# -- ACTIVEマシンのイメージ一覧
	{
		echo "ACTIVEマシンのイメージ一覧\n";
		my $result = `docker images`;
		message(info=>$result, 1);
	}
	print "\n";

	# -- ACTIVEマシンのコンテナ一覧
	{
		echo "ACTIVEマシンのコンテナ一覧\n";
		my $result = `docker ps -a`;
		message(info=>$result, 1);
	}
	print "\n";
}

# --------------------------------------------------------------------
# genie clear                         コンテナやイメージを強制削除する
# --------------------------------------------------------------------
sub clear {

	# -- 規定のgenieコンテナを強制削除する
	if($ARGV[1] eq '') {
		`docker inspect -f {{.Name}} $config{DOCKER}->{NAME} $hide_all`;
		if($?) {
			message(warning=>"コンテナが見つかりません。：$config{DOCKER}->{NAME}");
		} else {
			`docker rm -f $config{DOCKER}->{NAME} $hide_all`;
			message(success=>"コンテナを強制削除しました。：$config{DOCKER}->{NAME}");
		}
		# コンテナ一覧を表示
		my $result = `docker ps -a`;
		message(info=>$result, 1);
	}

	# -- dockerコンテナを全て強制削除する
	elsif($ARGV[1] eq 'all') {
		my @list = split(/[\r\n]+/, `docker ps -qa`);
		if(@list) {
			my @err;
			foreach my $id (@list) {
				echo "  $id - ";
				`docker rm -f $id`;
				if($?) {
					style(color=>'red'); echo "Failed!\n"; style(color=>'clear');
					push @err;
				} else {
					style(color=>'green'); echo "Deleted.\n"; style(color=>'clear');
				}
			}
			if(@err) {
				message(danger=>'強制削除に失敗したコンテナがあります。\n'.join('',map{"- $_\n"}@err));
			} else {
				message(success=>'全てのコンテナを強制削除しました');
			}
		} else {
			message(warning=>'コンテナが１つも見つかりませんでした。');
		}
		# コンテナ一覧を表示
		my $result = `docker ps -a`;
		message(info=>$result, 1);
	}

	# -- <none>状態のイメージを削除する
	if($ARGV[1] eq 'noneimage') {
		my @list = split(/[\r\n]+/, `docker images --filter "dangling=true" -q`);
		if(@list) {
			my @err;
			foreach my $id (@list) {
				echo "  $id - ";
				`docker rmi -f $id`;
				if($?) {
					style(color=>'red'); echo "Failed!\n"; style(color=>'clear');
					push @err;
				} else {
					style(color=>'green'); echo "Deleted.\n"; style(color=>'clear');
				}
			}
			if(@err) {
				message(danger=>'強制削除に失敗した<none>イメージがあります。\n'.join('',map{"- $_\n"}@err));
			} else {
				message(success=>'全ての<none>イメージを強制削除しました');
			}
		} else {
			message(warning=>'<none>イメージは見つかりませんでした。');
		}
		# イメージ一覧を表示
		my $result = `docker images`;
		message(info=>$result, 1);
	}

}

# --------------------------------------------------------------------
# genie config                                    設定の内容を確認する
# --------------------------------------------------------------------
sub config {
	message(info=>Dumper(\%config));
}

# --------------------------------------------------------------------
# genie httpd             簡易ローカルWebサーバ起動（設定ファイル不必要）
# --------------------------------------------------------------------
sub httpd {

	# -- 公式httpdイメージから起動
	my $vpath = $is_win ? '/'.lc($drive_letter).$now_path : $now_path;
	my $cmd = "docker run -d -p 80 -v $vpath:/var/www/html/ php:5.5-apache";
	# my $cmd = "docker run -d -p 80 -v $vpath:/var/www/html/ php:5.6-apache";
	# my $cmd = "docker run -d -p 80 -v $vpath:/var/www/html/ php:7.0-apache";
	my $cid = `$cmd`;
	if($?) {
		throw('Webサーバが起動しませんでした。', $cmd);
	}

	# -- コンテナの情報からブラウザを起動
	if(`docker port $cid 80` =~ /(\d+)$/) {

		# -- IPとポートを取得
		my $port = $1;
		my $ip = `docker-machine ip default`;
		chomp $ip;
		message(success=>"http://$ip:$port/");

		# -- ブラウザ起動
		my $open;
		if($is_win) { $open = 'start'; }
		elsif($is_mac) { $open = 'open'; }
		elsif($is_linux) { $open = 'xdg-open'; }
		`$open http://$ip:$port/`;

		# -- Ctrl+C時に自動的にコンテナ削除されるように
		if($is_win) {
			# Winの場合
			$SIG{INT} = sub { `docker rm -f $cid`; };
			system("docker logs -f $cid");
		} else {
			# Mac/Linuxの場合
			system("docker logs -f $cid");
			`docker rm -f $cid`;
		}

	} else {
		throw('サーバは起動しましたが、ポートが取得できませんでした。');
	}
}

# --------------------------------------------------------------------
# genie build             簡易ローカルWebサーバ起動（設定ファイル不必要）
# --------------------------------------------------------------------
sub build {

	# -- nocacheオプション
	my $nocache = '--no-cache' if ($ARGV[1] eq 'nocache');

	# -- .genie/Dockerfileをビルドする
	my $dockerfile = $config{GENERAL}->{home_path}."/$genie_dir/Dockerfile";
	if(! -s $dockerfile){
		throw('Dockerfileが見つからないか、空ファイルです。', $dockerfile);
	}

	# -- 確認
	my $input = input(
		sprintf(
			'%s マシーンに %s イメージをビルドしてもよろしいでしょうか。[y/N]:',
			$config{DOCKER}->{MACHINE},
			$config{DOCKER}->{IMAGE},
		)
	);

	print "\n";
	if($input =~ /^y$/i ) {
		# -- ビルド実行
		my $cmd = "docker build -t $config{DOCKER}->{IMAGE} $nocache $config{GENERAL}->{home_path}/$genie_dir/";
		message(info=>"ビルドを開始します。\n$cmd");
		my $result = `$cmd`;
		if($?) {
			throw('ビルドに失敗しました。', $result);
		}
		# -- イメージ一覧表示
		message(success=>'ビルド完了しました。');
		$cmd = `docker images`;
		message(info=>$cmd);
	}
}
